{
	"info": {
		"_postman_id": "blob-service-unit-tests",
		"name": "Blob Service - Unit Tests",
		"description": "Collection to test the Blob Service functionality. Tests various scenarios including file upload, download, and management operations.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Test Service Health Check",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": ["{{base_url}}"],
					"path": ["health"]
				},
				"description": "Tests the health check endpoint to ensure the service is running."
			},
			"response": []
		},
		{
			"name": "2. Test File Upload",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "multipart/form-data"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": []
						},
						{
							"key": "customer_id",
							"value": "{{test_customer_id}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/blob-service/upload",
					"host": ["{{base_url}}"],
					"path": ["api", "blob-service", "upload"]
				},
				"description": "Tests file upload functionality with customer ID."
			},
			"response": []
		},
		{
			"name": "3. Test File Download",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/blob-service/download/{{test_file_id}}",
					"host": ["{{base_url}}"],
					"path": ["api", "blob-service", "download", "{{test_file_id}}"]
				},
				"description": "Tests file download functionality."
			},
			"response": []
		},
		{
			"name": "4. Test Generate Signed URL",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/blob-service/generate-signed-url?bucket={{test_bucket}}&key={{test_key}}&expiration={{test_expiration}}",
					"host": ["{{base_url}}"],
					"path": ["api", "blob-service", "generate-signed-url"],
					"query": [
						{
							"key": "bucket",
							"value": "{{test_bucket}}",
							"description": "Bucket name containing the file"
						},
						{
							"key": "key",
							"value": "{{test_key}}",
							"description": "File key/name"
						},
						{
							"key": "expiration",
							"value": "{{test_expiration}}",
							"description": "URL expiration time in seconds (300 = 5 minutes)"
						}
					]
				},
				"description": "Tests the generate signed URL functionality with 5-minute expiration time."
			},
			"response": []
		},
		{
			"name": "5. Test Delete Single File",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/blob-service/delete-key?bucket={{test_bucket}}&key={{test_single_file_key}}",
					"host": ["{{base_url}}"],
					"path": ["api", "blob-service", "delete-key"],
					"query": [
						{
							"key": "bucket",
							"value": "{{test_bucket}}",
							"description": "Bucket name containing the file to delete"
						},
						{
							"key": "key",
							"value": "{{test_single_file_key}}",
							"description": "Single file key/name to delete"
						}
					]
				},
				"description": "Tests deletion of a single file from blob storage."
			},
			"response": []
		},
		{
			"name": "6. Test Delete Folder (with trailing slash)",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/blob-service/delete-key?bucket={{test_bucket}}&key={{test_folder_key_with_slash}}",
					"host": ["{{base_url}}"],
					"path": ["api", "blob-service", "delete-key"],
					"query": [
						{
							"key": "bucket",
							"value": "{{test_bucket}}",
							"description": "Bucket name containing the folder to delete"
						},
						{
							"key": "key",
							"value": "{{test_folder_key_with_slash}}",
							"description": "Folder path with trailing slash to delete"
						}
					]
				},
				"description": "Tests deletion of a folder (with trailing slash) and all its contents from blob storage."
			},
			"response": []
		},
		{
			"name": "7. Test Delete Folder (without trailing slash)",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/blob-service/delete-key?bucket={{test_bucket}}&key={{test_folder_key_without_slash}}",
					"host": ["{{base_url}}"],
					"path": ["api", "blob-service", "delete-key"],
					"query": [
						{
							"key": "bucket",
							"value": "{{test_bucket}}",
							"description": "Bucket name containing the folder to delete"
						},
						{
							"key": "key",
							"value": "{{test_folder_key_without_slash}}",
							"description": "Folder path without trailing slash to delete"
						}
					]
				},
				"description": "Tests deletion of a folder (without trailing slash) and all its contents from blob storage."
			},
			"response": []
		},
		{
			"name": "8. Test Delete Non-existent Key",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/blob-service/delete-key?bucket={{test_bucket}}&key={{test_nonexistent_key}}",
					"host": ["{{base_url}}"],
					"path": ["api", "blob-service", "delete-key"],
					"query": [
						{
							"key": "bucket",
							"value": "{{test_bucket}}",
							"description": "Bucket name"
						},
						{
							"key": "key",
							"value": "{{test_nonexistent_key}}",
							"description": "Non-existent key to test error handling"
						}
					]
				},
				"description": "Tests deletion of a non-existent key to verify proper error handling."
			},
			"response": []
		},
		{
			"name": "9. Test Delete from Non-existent Bucket",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/blob-service/delete-key?bucket={{test_nonexistent_bucket}}&key={{test_single_file_key}}",
					"host": ["{{base_url}}"],
					"path": ["api", "blob-service", "delete-key"],
					"query": [
						{
							"key": "bucket",
							"value": "{{test_nonexistent_bucket}}",
							"description": "Non-existent bucket name to test error handling"
						},
						{
							"key": "key",
							"value": "{{test_single_file_key}}",
							"description": "File key to delete"
						}
					]
				},
				"description": "Tests deletion from a non-existent bucket to verify proper error handling."
			},
			"response": []
		},
		{
			"name": "10. Test Store Frames Zip",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "multipart/form-data"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": []
						},
						{
							"key": "key",
							"type": "text",
							"value": "{{frames_zip_key}}"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/blob-service/store-frames-zip",
					"host": ["{{base_url}}"],
					"path": ["api", "blob-service", "store-frames-zip"]
				},
				"description": "Uploads a frames ZIP archive (.zip) for a particular blend object into the frames-zip bucket."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('Status code is valid', function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,400,404,500]);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"  const json = pm.response.json();",
							"  pm.test('Upload success message present', function(){ pm.expect(json).to.have.property('message'); pm.expect(json.message.toLowerCase()).to.include('frames zip stored'); });",
							"  pm.test('Bucket is frames-zip', function(){ pm.expect(json).to.have.property('bucket','frames-zip'); });",
							"  pm.test('Key echoed back', function(){ pm.expect(json).to.have.property('key'); });",
							"  pm.collectionVariables.set('frames_zip_key', json.key);",
							"}",
							"",
							"if (pm.response.code !== 200) {",
							"  try { const json = pm.response.json(); pm.test('Error shape', function(){ pm.expect(json).to.have.property('error'); }); } catch(e) { /* ignore parse errors */ }",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "11. Test Retrieve Frames Zip",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/blob-service/retrieve-frames-zip?key={{frames_zip_key}}",
					"host": ["{{base_url}}"],
					"path": ["api", "blob-service", "retrieve-frames-zip"],
					"query": [
						{
							"key": "key",
							"value": "{{frames_zip_key}}",
							"description": "Key of frames zip archive to retrieve"
						}
					]
				},
				"description": "Retrieves previously uploaded frames zip archive by key."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('Status code is valid', function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,400,404,500]);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"  pm.test('Content-Type is application/zip', function(){ pm.expect(pm.response.headers.get('Content-Type')).to.include('application/zip'); });",
							"  pm.test('Content-Disposition header present', function(){ pm.expect(pm.response.headers.has('Content-Disposition')).to.be.true; });",
							"}",
							"else {",
							"  try { const json = pm.response.json(); pm.test('Error shape on failure', function(){ pm.expect(json).to.have.property('error'); }); } catch(e) { /* ignore */ }",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "12. Test Store Rendered Images to Zip (Async)",
			"request": {
				"method": "POST",
				"header": [
					{ "key": "Content-Type", "value": "application/x-www-form-urlencoded" }
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{ "key": "bucket", "value": "{{test_bucket}}", "type": "text" },
						{ "key": "prefix", "value": "{{test_prefix}}", "type": "text" },
						{ "key": "zip_bucket", "value": "frames-zip", "type": "text" },
						{ "key": "zip_key", "value": "{{frames_zip_key}}", "type": "text" }
					]
				},
				"url": {
					"raw": "{{base_url}}/api/blob-service/store-rendered-images-zip",
					"host": ["{{base_url}}"],
					"path": ["api", "blob-service", "store-rendered-images-zip"]
				},
				"description": "Triggers the async API to zip all images under a prefix and upload to frames-zip bucket."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('Status code is valid', function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,400,404,500]);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"  const json = pm.response.json();",
							"  pm.test('Zip archive created message', function(){ pm.expect(json).to.have.property('message'); pm.expect(json.message.toLowerCase()).to.include('zip archive created'); });",
							"  pm.test('Zip bucket is frames-zip', function(){ pm.expect(json).to.have.property('zip_bucket','frames-zip'); });",
							"  pm.test('Zip key present', function(){ pm.expect(json).to.have.property('zip_key'); });",
							"  pm.collectionVariables.set('frames_zip_key', json.zip_key);",
							"  pm.test('Count is a number', function(){ pm.expect(json).to.have.property('count'); pm.expect(json.count).to.be.a('number'); });",
							"}",
							"",
							"if (pm.response.code !== 200) {",
							"  try { const json = pm.response.json(); pm.test('Error shape', function(){ pm.expect(json).to.have.property('error'); }); } catch(e) { /* ignore parse errors */ }",
							"}"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script for Blob Service Unit Tests",
					"console.log('Testing endpoint: ' + pm.request.url);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Test script for Blob Service Unit Tests",
					"pm.test('Status code is valid', function () {",
					"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400, 404, 500]);",
					"});",
					"",
					"pm.test('Response time is acceptable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Additional tests for signed URL endpoint",
					"if (pm.request.url.toString().includes('generate-signed-url')) {",
					"    pm.test('Signed URL response has correct structure', function () {",
					"        const responseJson = pm.response.json();",
					"        pm.expect(responseJson).to.have.property('signed_url');",
					"        pm.expect(responseJson).to.have.property('bucket');",
					"        pm.expect(responseJson).to.have.property('key');",
					"        pm.expect(responseJson).to.have.property('expiration_seconds');",
					"        pm.expect(responseJson).to.have.property('message');",
					"    });",
					"    ",
					"    pm.test('Signed URL is a valid URL', function () {",
					"        const responseJson = pm.response.json();",
					"        if (responseJson.signed_url) {",
					"            pm.expect(responseJson.signed_url).to.match(/^https?:\\/\\//);",
					"        }",
					"    });",
					"    ",
					"    pm.test('Expiration time matches request parameter', function () {",
					"        const responseJson = pm.response.json();",
					"        const requestExpiration = pm.request.url.query.get('expiration');",
					"        if (responseJson.expiration_seconds && requestExpiration) {",
					"            pm.expect(responseJson.expiration_seconds.toString()).to.equal(requestExpiration.value);",
					"        }",
					"    });",
					"}",
					"",
					"// Additional tests for delete key endpoint",
					"if (pm.request.url.toString().includes('delete-key')) {",
					"    pm.test('Delete key response has correct structure', function () {",
					"        const responseJson = pm.response.json();",
					"        pm.expect(responseJson).to.have.property('message');",
					"        pm.expect(responseJson).to.have.property('bucket');",
					"        pm.expect(responseJson).to.have.property('key');",
					"        pm.expect(responseJson).to.have.property('deleted_objects');",
					"        pm.expect(responseJson).to.have.property('total_deleted');",
					"    });",
					"    ",
					"    pm.test('Deleted objects is an array', function () {",
					"        const responseJson = pm.response.json();",
					"        pm.expect(responseJson.deleted_objects).to.be.an('array');",
					"    });",
					"    ",
					"    pm.test('Total deleted is a number', function () {",
					"        const responseJson = pm.response.json();",
					"        pm.expect(responseJson.total_deleted).to.be.a('number');",
					"        pm.expect(responseJson.total_deleted).to.be.at.least(0);",
					"    });",
					"    ",
					"    pm.test('Bucket parameter matches response', function () {",
					"        const responseJson = pm.response.json();",
					"        const requestBucket = pm.request.url.query.get('bucket');",
					"        if (responseJson.bucket && requestBucket) {",
					"            pm.expect(responseJson.bucket).to.equal(requestBucket.value);",
					"        }",
					"    });",
					"    ",
					"    pm.test('Key parameter matches response', function () {",
					"        const responseJson = pm.response.json();",
					"        const requestKey = pm.request.url.query.get('key');",
					"        if (responseJson.key && requestKey) {",
					"            pm.expect(responseJson.key).to.equal(requestKey.value);",
					"        }",
					"    });",
					"    ",
					"    // Test for successful deletion (200 status)",
					"    if (pm.response.code === 200) {",
					"        pm.test('Successful deletion response', function () {",
					"            const responseJson = pm.response.json();",
					"            pm.expect(responseJson.message).to.include('deleted successfully');",
					"            pm.expect(responseJson.total_deleted).to.be.at.least(0);",
					"        });",
					"    }",
					"    ",
					"    // Test for error responses (500 status)",
					"    if (pm.response.code === 500) {",
					"        pm.test('Error response structure', function () {",
					"            const responseJson = pm.response.json();",
					"            pm.expect(responseJson).to.have.property('error');",
					"            pm.expect(responseJson.error).to.be.a('string');",
					"        });",
					"    }",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:13000",
			"type": "string",
			"description": "Base URL for Blob Service (localhost:13000)"
		},
		{
			"key": "test_customer_id",
			"value": "cust_001",
			"type": "string",
			"description": "Test customer ID for reuse across tests"
		},
		{
			"key": "test_file_id",
			"value": "file_001",
			"type": "string",
			"description": "Test file ID for reuse across tests"
		},
		{
			"key": "test_bucket",
			"value": "test-bucket",
			"type": "string",
			"description": "Test bucket name for signed URL generation"
		},
		{
			"key": "test_key",
			"value": "test-file.jpg",
			"type": "string",
			"description": "Test file key/name for signed URL generation"
		},
		{
			"key": "test_expiration",
			"value": "300",
			"type": "string",
			"description": "Test expiration time in seconds (300 = 5 minutes)"
		},
		{
			"key": "test_single_file_key",
			"value": "test-single-file.txt",
			"type": "string",
			"description": "Test single file key for deletion testing"
		},
		{
			"key": "test_folder_key_with_slash",
			"value": "test-folder/",
			"type": "string",
			"description": "Test folder key with trailing slash for deletion testing"
		},
		{
			"key": "test_folder_key_without_slash",
			"value": "test-folder",
			"type": "string",
			"description": "Test folder key without trailing slash for deletion testing"
		},
		{
			"key": "test_nonexistent_key",
			"value": "nonexistent-file.txt",
			"type": "string",
			"description": "Test non-existent key for error handling testing"
		},
		{
			"key": "test_nonexistent_bucket",
			"value": "nonexistent-bucket",
			"type": "string",
			"description": "Test non-existent bucket for error handling testing"
		},
		{
			"key": "test_prefix",
			"value": "test-prefix/",
			"type": "string",
			"description": "Test prefix for storing rendered images"
		}
	]
}
