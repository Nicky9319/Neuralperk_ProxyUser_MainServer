{
	"info": {
		"_postman_id": "customer-service-get-blend-file-tests",
		"name": "Customer Service - Get Blend File Tests",
		"description": "Test collection for the get blend file API endpoint. Tests blend file retrieval with reverse proxy functionality.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Test Get Blend File - Success Case",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{valid_access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/customer-service/get-blend-file/{{test_object_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"customer-service",
						"get-blend-file",
						"{{test_object_id}}"
					]
				},
				"description": "Tests successful blend file retrieval. This should return the actual blend file with proper headers via reverse proxy from blob service."
			},
			"response": []
		},
		{
			"name": "2. Test Get Blend File - Missing Authentication",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/customer-service/get-blend-file/{{test_object_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"customer-service",
						"get-blend-file",
						"{{test_object_id}}"
					]
				},
				"description": "Tests blend file retrieval without authentication header. Should return 401 Unauthorized."
			},
			"response": []
		},
		{
			"name": "3. Test Get Blend File - Invalid Access Token",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer invalid_token_123"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/customer-service/get-blend-file/{{test_object_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"customer-service",
						"get-blend-file",
						"{{test_object_id}}"
					]
				},
				"description": "Tests blend file retrieval with invalid access token. Should return 401 Unauthorized."
			},
			"response": []
		},
		{
			"name": "4. Test Get Blend File - Empty Object ID",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{valid_access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/customer-service/get-blend-file/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"customer-service",
						"get-blend-file",
						""
					]
				},
				"description": "Tests blend file retrieval with empty object ID in path. Should return 404 Not Found."
			},
			"response": []
		},
		{
			"name": "5. Test Get Blend File - Invalid Object ID",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{valid_access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/customer-service/get-blend-file/invalid_object_id_123",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"customer-service",
						"get-blend-file",
						"invalid_object_id_123"
					]
				},
				"description": "Tests blend file retrieval with invalid object ID. Should return 404 Not Found."
			},
			"response": []
		},
		{
			"name": "6. Test Get Blend File - Non-Existent Object",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{valid_access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/customer-service/get-blend-file/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"customer-service",
						"get-blend-file",
						"00000000-0000-0000-0000-000000000000"
					]
				},
				"description": "Tests blend file retrieval with a valid UUID format but non-existent object. Should return 404 Not Found."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script for Get Blend File Tests",
					"console.log('Testing endpoint: ' + pm.request.url);",
					"console.log('Request method: ' + pm.request.method);",
					"console.log('Current timestamp: ' + new Date().toISOString());",
					"",
					"// Log environment variables for debugging",
					"console.log('Base URL: ' + pm.environment.get('base_url'));",
					"console.log('Test Object ID: ' + pm.environment.get('test_object_id'));",
					"console.log('Valid Access Token: ' + pm.environment.get('valid_access_token'));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Test script for Get Blend File API",
					"",
					"// Basic response validation",
					"pm.test('Response time is acceptable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(10000);",
					"});",
					"",
					"// Test specific to successful blend file retrieval",
					"if (pm.response.code === 200 && pm.request.url.path.includes('get-blend-file')) {",
					"    pm.test('Successful blend file retrieval - streaming response', function () {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/octet-stream');",
					"        pm.expect(pm.response.headers.get('Content-Disposition')).to.include('attachment');",
					"        pm.expect(pm.response.headers.get('Cache-Control')).to.include('no-cache');",
					"    });",
					"    ",
					"    pm.test('Blend file content is valid binary data', function () {",
					"        pm.expect(pm.response.body).to.not.be.null;",
					"        pm.expect(pm.response.body.length).to.be.greaterThan(0);",
					"    });",
					"    ",
					"    pm.test('Response is streaming (no content-length header)', function () {",
					"        // Streaming responses typically don't have content-length",
					"        pm.expect(pm.response.headers.get('Content-Length')).to.be.undefined;",
					"    });",
					"}",
					"",
					"// Test specific to authentication failures",
					"if (pm.response.code === 401) {",
					"    pm.test('Authentication error response', function () {",
					"        const responseJson = pm.response.json();",
					"        pm.expect(responseJson).to.have.property('detail');",
					"        pm.expect(responseJson.detail).to.include('token') || pm.expect(responseJson.detail).to.include('authentication');",
					"    });",
					"}",
					"",
					"// Test specific to validation failures",
					"if (pm.response.code === 422) {",
					"    pm.test('Validation error response', function () {",
					"        const responseJson = pm.response.json();",
					"        pm.expect(responseJson).to.have.property('detail');",
					"    });",
					"}",
					"",
					"// Test specific to not found errors",
					"if (pm.response.code === 404) {",
					"    pm.test('Not found error response', function () {",
					"        const responseJson = pm.response.json();",
					"        pm.expect(responseJson).to.have.property('detail');",
					"        pm.expect(responseJson.detail).to.include('not found') || pm.expect(responseJson.detail).to.include('Blend file');",
					"    });",
					"}",
					"",
					"// Log response for debugging",
					"console.log('Response Status: ' + pm.response.status);",
					"console.log('Response Headers: ' + JSON.stringify(pm.response.headers.all()));",
					"",
					"// For successful responses, log file info",
					"if (pm.response.code === 200 && pm.request.url.path.includes('get-blend-file')) {",
					"    console.log('File retrieved successfully');",
					"    console.log('Content-Type: ' + pm.response.headers.get('Content-Type'));",
					"    console.log('Content-Disposition: ' + pm.response.headers.get('Content-Disposition'));",
					"    console.log('File size: ' + pm.response.body.length + ' bytes');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:11000",
			"type": "string",
			"description": "Base URL for the Customer Service. Update this if your service runs on a different port or host."
		},
		{
			"key": "test_object_id",
			"value": "test_object_001",
			"type": "string",
			"description": "Test object ID for testing the get blend file API. This should be a valid object ID that exists in your system and has an associated blend file."
		},
		{
			"key": "valid_access_token",
			"value": "cust_001",
			"type": "string",
			"description": "Valid access token for testing authentication. This should be a valid Bearer token that your auth service recognizes."
		}
	]
}
