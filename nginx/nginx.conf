events {
    worker_connections 1024;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10000M;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    upstream auth_service {
        server 127.0.0.1:10000;
    }

    upstream customer_service {
        server 127.0.0.1:11000;
    }

    # Add CORS handling map
    map $request_method $cors_method {
        OPTIONS 11;
        GET     1;
        POST    1;
        PUT     1;
        DELETE  1;
        default 0;
    }

    # Redirect all HTTP traffic to HTTPS
    server {
        listen 80;
        server_name api.renderperk.studio admin.renderperk.studio;

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server block
    server {
        listen 443 ssl http2;
        server_name api.renderperk.studio;

        ssl_certificate /etc/letsencrypt/live/api.renderperk.studio/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/api.renderperk.studio/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;

        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Auth Service
        location /api/auth-service/ {
            # Handle CORS preflight
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin '*' always;
                add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header Access-Control-Allow-Headers 'Authorization, Content-Type, Accept, Origin, X-Requested-With' always;
                add_header Access-Control-Max-Age 1728000 always;
                add_header Content-Type 'text/plain; charset=utf-8' always;
                add_header Content-Length 0 always;
                return 204;
            }

            proxy_pass http://auth_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Remove CORS headers from backend response to avoid duplication
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;

            # Add CORS headers for actual requests
            add_header Access-Control-Allow-Origin '*' always;
            add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'Authorization, Content-Type, Accept, Origin, X-Requested-With' always;
        }

        # Customer Service
        location /api/customer-service/ {
            # Handle CORS preflight
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin '*' always;
                add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header Access-Control-Allow-Headers 'Authorization, Content-Type, Accept, Origin, X-Requested-With' always;
                add_header Access-Control-Max-Age 1728000 always;
                add_header Content-Type 'text/plain; charset=utf-8' always;
                add_header Content-Length 0 always;
                return 204;
            }

            proxy_pass http://customer_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 300s;

            # Remove CORS headers from backend response to avoid duplication
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;

            # Add CORS headers for actual requests
            add_header Access-Control-Allow-Origin '*' always;
            add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'Authorization, Content-Type, Accept, Origin, X-Requested-With' always;
        }

        # Default route
        location / {
            return 404 "API endpoint not found. Available endpoints: /api/auth-service/*, /api/customer-service/*";
        }
    }

    # Admin Panel HTTPS server block
    server {
        listen 443 ssl http2;
        server_name admin.renderperk.studio;

        ssl_certificate /etc/letsencrypt/live/admin.renderperk.studio/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/admin.renderperk.studio/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;

        # Admin panel proxy
        location / {
            proxy_pass http://127.0.0.1:15000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 300s;
            
            # CORS headers for admin panel
            add_header Access-Control-Allow-Origin '*' always;
            add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'Authorization, Content-Type, Accept, Origin, X-Requested-With' always;
        }
    }
}